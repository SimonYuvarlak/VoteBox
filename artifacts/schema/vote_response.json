{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "VoteResponse",
  "description": "We define a custom struct for each query response",
  "type": "object",
  "required": [
    "abstain_count",
    "create_date",
    "deadline",
    "description",
    "id",
    "no_count",
    "no_with_veto_count",
    "owner",
    "topic",
    "total_amount",
    "yes_count"
  ],
  "properties": {
    "abstain_count": {
      "$ref": "#/definitions/Uint128"
    },
    "create_date": {
      "type": "string"
    },
    "deadline": {
      "$ref": "#/definitions/Scheduled"
    },
    "description": {
      "type": "string"
    },
    "id": {
      "$ref": "#/definitions/Uint64"
    },
    "native_denom": {
      "type": [
        "string",
        "null"
      ]
    },
    "no_count": {
      "$ref": "#/definitions/Uint128"
    },
    "no_with_veto_count": {
      "$ref": "#/definitions/Uint128"
    },
    "owner": {
      "type": "string"
    },
    "topic": {
      "type": "string"
    },
    "total_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "yes_count": {
      "$ref": "#/definitions/Uint128"
    }
  },
  "definitions": {
    "Scheduled": {
      "description": "Scheduled represents a point in time when an event happens. It can compare with a BlockInfo and will return is_triggered() == true once the condition is hit (and for every block in the future)",
      "anyOf": [
        {
          "description": "AtHeight will schedule when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will schedule when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
